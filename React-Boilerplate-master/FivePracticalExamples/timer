// this is the code for Index.html that shows a timer

<!DOCTYPE html>
<html lang="en`">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>React - Tutorial</title>
    <link rel ="stylesheet" type="text/css" href="../../css/main.css">
    <script src="../../js/react.min.js"></script>
    <script src="../../js/react-dom.min.js"></script>
    <script src="../../js/browser.min.js"></script>
</head>
<body>

    <div id="container"></div>

    <script type="text/babel">

    var TimerExample = React.createClass({

        getInitialState: function(){

            // This is called before our render function. The object that is 
            // returned is assigned to this.state, so we can use it later.

            return { elapsed: 0 };
        },

        componentDidMount: function(){

            // componentDidMount is called by react when the component 
            // has been rendered on the page. We can set the interval here:
            // setInterval is a js function that execuse every x milsecond

            this.timer = setInterval(this.tick, 50);
        },

        componentWillUnmount: function(){

            // This method is called immediately before the component is removed
            // from the page and destroyed. We can clear the interval here:
            // clearInterval stops the function linked to setInterval

            clearInterval(this.timer);
        },

        tick: function(){

            // This function is called every 50 ms. It updates the 
            // elapsed counter. Calling setState causes the component to be re-rendered

            this.setState({elapsed: new Date() - this.props.start});
        },

        render: function() {
            
            var elapsed = Math.round(this.state.elapsed / 100);

            // This will give a number with one digit after the decimal dot (xx.x):
            var seconds = (elapsed / 10).toFixed(1);    

            // Although we return an entire <p> element, react will smartly update
            // only the changed parts, which contain the seconds variable.

            return <p>This example was started <b>{seconds} seconds</b> ago.</p>;
        }
    });

    // create props when using the class/tag. 
    ReactDOM.render(
        <TimerExample start={Date.now()} />,
        document.getElementById('container')
    );

    </script>

</body>
</html>



<!-- you make component make sure you only use one div (or one parent component) --> 
