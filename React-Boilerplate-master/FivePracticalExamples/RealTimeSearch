<!DOCTYPE html>
<html lang="en`">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>React - Tutorial</title>
    <link rel ="stylesheet" type="text/css" href="../../css/main_five_examples.css">
    <script src="../../js/react.min.js"></script>
    <script src="../../js/react-dom.min.js"></script>
    <script src="../../js/browser.min.js"></script>
</head>
<body>

    <div id="container"></div>

    <script type="text/babel">

    // Let's create a "real-time search" component


    var SearchExample = React.createClass({

        getInitialState: function(){
            return { searchString: '' };
        },

        handleChange: function(e){

            // If you comment out this line, the text box will not change its value.
            // This is because in React, an input cannot change independently of the value
            // that was assigned to it. In our case this is this.state.searchString.
            // the target property returns the element that triggers the event (in this case the search box)
            this.setState({searchString:e.target.value});
        },

        render: function() {
            //trim() function removes the beginning and the ending wide space of a string
            var libraries = this.props.items,
                searchString = this.state.searchString.trim().toLowerCase();


            if(searchString.length > 0){


                // We are searching. Filter the results.
                // filter() method creates a new array with all elements that pass the test implemented by the provided function. 
                // Use filter method to update the Library list

                libraries = libraries.filter(function(l){
                    return l.name.toLowerCase().match( searchString );
                });

            }
            // the value property display the current search string, the onChange is a callback that updates the list
            return <div>
                        <input type="text" value={this.state.searchString} onChange={this.handleChange} placeholder="Type here" />

                        <ul> 

                            { libraries.map(function(l){
                                return <li>{l.name} <a href={l.url}>{l.url}</a></li>
                            }) }

                        </ul>

                    </div>;

        }
    });
    var libraries = [

        { name: 'Backbone.js', url: 'http://documentcloud.github.io/backbone/'},
        { name: 'AngularJS', url: 'https://angularjs.org/'},
        { name: 'jQuery', url: 'http://jquery.com/'},
        { name: 'Prototype', url: 'http://www.prototypejs.org/'},
        { name: 'React', url: 'http://facebook.github.io/react/'},
        { name: 'Ember', url: 'http://emberjs.com/'},
        { name: 'Knockout.js', url: 'http://knockoutjs.com/'},
        { name: 'Dojo', url: 'http://dojotoolkit.org/'},
        { name: 'Mootools', url: 'http://mootools.net/'},
        { name: 'Underscore', url: 'http://documentcloud.github.io/underscore/'},
        { name: 'Lodash', url: 'http://lodash.com/'},
        { name: 'Moment', url: 'http://momentjs.com/'},
        { name: 'Express', url: 'http://expressjs.com/'},
        { name: 'Koa', url: 'http://koajs.com/'},

    ];

    // Render the SearchExample component on the page

    ReactDOM.render(
        <SearchExample items={ libraries } />,
        document.getElementById('container')
    );
    </script>

</body>
</html>



<!-- you make component make sure you only use one div (or one parent component) --> 
